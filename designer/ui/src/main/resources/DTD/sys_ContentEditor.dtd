<?xml encoding="UTF-8"?>
<!--
  - Copyright 1999-2021 Percussion Software, Inc.
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -->

<!--
   $Id: sys_ContentEditor.dtd 1.13 2002/11/21 15:08:23Z martingenhart Exp $

   This DTD defines the stucture of the result XML document generated by the
   Content Editor engine.
-->

<!-- Include the DisplayChoices.dtd -->
<!ENTITY % DisplayChoices SYSTEM "sys_DisplayChoices.dtd">
%DisplayChoices;

<!--
   Identifier for referenced resources.
-->
<!ENTITY % URI "CDATA">
<!--
   A unique numeric identifier for an object. It is unique within a context.
   Quite often it is used as the primary key in a table.
-->
<!ENTITY % UniqueId "CDATA">
<!--
   Boolean flags. To work as we want them to, the Boolean entity must be a
   PEDecl and the True/False entities must be PEDecls. This appears to work
   correctly for the Xml4j parser. However, Xml Spy won't process this
   correctly, so we just hard-code the values.
-->
<!ENTITY % True "yes">
<!ENTITY % False "no">
<!ENTITY % Boolean "( %True; | %False; )">
<!--
   An enumeration for the types of workflow actions can this user take, such
   as transitioning a document and sending notifications.
            0 - no actions allowed
            1 - approval actions allowed
            2 - notification actions allowed
            3 - Both approval and notification allowed
-->
<!ENTITY % AssignmentTypes "(0|1|2|3)">
<!--
   An enumeration to indicate whether the document is checked out and whether
   this user has it checked out.
            0 - doc not checked out
            1 - checked out by current user
            2 - checked out by different user
-->
<!ENTITY % CheckOutStatusTypes "(0|1|2)">
<!--
   An editor is a collection of fields used for entering, editing and viewing
   the content and the instructions for displaying these fields and a
   collection of system information.

   Content:
   DisplayError - If a validation error occurs, this contains the general
         message about the failure(s).

   VariantList - Contains the variants for preview. Only present when the
         mode is sys_preview.

   ActionLinkList - Contains a set of named actions such as add or update,
         that are appropriate for the current page. The style sheet should
         use these actions to create the UI for the end user and assign the
         URL to the UI item.


   Attributes:
   docType - Is this page the result of a user request for an editor, or is it
         the result of a validation failure during a modification request.
         If mode is sys_preview, this will always be sys_normal.

   mode - A flag to indicate whether this document was built for previewing
         the data or editing it.

   commandName - The internal name of the command handler that is serving
         up this document. It is the command param passed with the original
         request for this editor.

   submitHref - The target of the submit button for the form used to edit
         this data.

   contentTypeId - The unique identifier for the content type that this editor
         handles. This is also available in the ContentStatus node, if workflow
         information is present.

   enableRelatedContent - This boolean specifies whether or not this content
         editor has related content enabled. The flag is optional and defaults to
         'no' if not provided.

   objectType - This is an integer that specifies the type of 'content' being
         generated by this editor. The allowed values come from the OBJECTS
         table. It is an optional attribute that defaults to 1 (item).
         Values other than 1 are reserved for system use.
         
   itemLocale - This is the locale of the item that is to be edited.

   producesResource - This is a boolean flag to specify whether the items created by 
         this content editor or of resource type or not. A resource generally requires
         location to publish like images, files etc.

-->
<!ELEMENT ContentEditor (DisplayError?, ControlNameSet, ItemContent, UserStatus, Workflow?, VariantList?, SectionLinkList?, ActionLinkList?)>
<!ATTLIST ContentEditor
   docType (sys_normal | sys_error) "sys_normal"
   mode (sys_preview | sys_edit) #REQUIRED
   commandName CDATA #REQUIRED
   submitHref %URI; #REQUIRED
   contentTypeId %UniqueId; #REQUIRED
   enableRelatedContent %Boolean; "no"
   objectType CDATA "1"
   itemLocale CDATA #REQUIRED
   producesResource %Boolean; "no"
>
<!--
   Contains all user settable system fields, included shared fields and
   content editor specific fields. Child data is included in the parent by
   including the child data as a Table element as the data for a control.
   All fields whose type is sys_hidden will appear at the beginning of the
   list of fields. The style sheet should display the fields in document
   order.

   Attributes:
   newDocument - this flag indicates whether or not this is a new item
      or not (editing an existing).

   childkey - the primary key for the row edited in the row editor, not
      used for all other editors.
-->
<!ELEMENT ItemContent (DisplayField*)>
<!ATTLIST ItemContent
   newDocument %Boolean; "no"
   childkey CDATA #IMPLIED
>
<!--
   This is included purely as a convenience to the style sheet writer. Every
   control that is used in this document is listed once in this set. This
   allows the style sheet to scan the controls for javascript includes and
   build the include list in the header more easily. The order of the entries
   is undefined.
-->
<!ELEMENT ControlNameSet (ControlName*)>
<!ELEMENT ControlName (#PCDATA)>
<!--
   The BasicInfo element follows the dtd for the workflowinfo element
   generated by the addPossibleTransitions exit.

   Attributes:
   contentId - Identifies 1 or more revisions of the content item included
         in this document.
-->
<!ELEMENT Workflow ((BasicInfo, HistoryList?, ContentStatus)?)>
<!ATTLIST Workflow
   contentId %UniqueId; #IMPLIED
>
<!ELEMENT HistoryList (HistoryEntry*)>
<!--
   Info regarding current state, and possible actions allowed from this state.
   The stylesheet should render all parameters included in the
   HiddenFormParams child as hidden fields within the form that contains the
   workflow action buttons.
-->
<!ELEMENT BasicInfo (UserName, AssignedRoles, HiddenFormParams?, ActionLinkList)>
<!ELEMENT HiddenFormParams (Param+)>
<!--
   Who currently has the document checked out.

   Attributes:
   checkOutStatus - see desc of entity

   assignmentType - see desc of entity
-->
<!ELEMENT CheckOutUserName (#PCDATA)>
<!ATTLIST CheckOutUserName
   assignmentType %AssignmentTypes; #IMPLIED
   checkOutStatus %CheckOutStatusTypes; #IMPLIED
>
<!--
   Attributes:
   assignmentType - see desc of entity
-->
<!ELEMENT UserName (#PCDATA)>
<!ATTLIST UserName
   assignmentType %AssignmentTypes; #IMPLIED
>
<!--
   All the roles which the associated user is currently a member of.
-->
<!ELEMENT AssignedRoles (Role*)>
<!--
   A role with name and id. The content is the role name.

   Attributes:
   assignmentType - see desc of entity. Applies to current state only.

   roleId - the identifier for this role
-->
<!ELEMENT Role (#PCDATA)>
<!ATTLIST Role
   roleId %UniqueId; #IMPLIED
   assignmentType %AssignmentTypes; #IMPLIED
>
<!--
   Basic information about the logged in user, such as his name.
-->
<!ELEMENT UserStatus (UserName?, Time, Roles?, RequestProperties)>
<!ATTLIST UserStatus
   sessionId CDATA #REQUIRED
   xml:lang CDATA #REQUIRED
>
<!ELEMENT RoleSet (Role+)>
<!ELEMENT Time (#PCDATA)>
<!--
   Contains information useful to the stylesheet processor that is independent
   of the data, such as the originating browser.
-->
<!ELEMENT RequestProperties (UserAgent, AcceptLanguage)>
<!ELEMENT UserAgent (#PCDATA)>
<!ELEMENT AcceptLanguage (#PCDATA)>
<!--
   Workflow information about the actions taken upon this document as it
   travelled through the workflow.

   Attributes:
   key - the unique identifier for this particular entry

   revision - Identifies the revision of the content item included in this
         document.

   workflowId - a unique identifier for the workflow that this document
         is currently in.

   transitionId - a unique identifier for the transition that caused this
         entry to be generated.

   isValid - A flag indicating whether the document was valid when this action
         was taken.
-->
<!ELEMENT HistoryEntry (Title, CheckOutUserName, LastModifier, LastModified, EventTime, Actor, StateName, Comment, Role, TransitionLabel)>
<!ATTLIST HistoryEntry
   key %UniqueId; #REQUIRED
   revision CDATA #REQUIRED
   workflowId %UniqueId; #REQUIRED
   transitionId %UniqueId; #REQUIRED
   isValid %Boolean; "no"
>
<!--
   Roles = A collection of each role for which the current user is authenticated.
-->
<!ELEMENT Roles (Role*)>
<!ELEMENT Title (#PCDATA)>
<!ELEMENT LastModifier (#PCDATA)>
<!ELEMENT LastModified (#PCDATA)>
<!ELEMENT EventTime (#PCDATA)>
<!ELEMENT Actor (#PCDATA)>
<!--
   TransitionLabel = The name of the transition performed.

   Attributes:
   transitionid - The id of the transition performed.
-->
<!ELEMENT TransitionLabel (#PCDATA)>
<!ATTLIST TransitionLabel
   transitionid CDATA #REQUIRED
>
<!ELEMENT Comment (#PCDATA)>
<!ELEMENT CreatedBy (#PCDATA)>
<!ELEMENT CreatedDate (#PCDATA)>
<!ELEMENT StartDate (#PCDATA)>
<!ELEMENT ExpirationDate (#PCDATA)>
<!ELEMENT AgingTime (#PCDATA)>
<!ELEMENT PublishDate (#PCDATA)>
<!ELEMENT PathName (#PCDATA)>
<!ELEMENT Suffix (#PCDATA)>
<!--
   StateName  = The workflow state name with its associated unique identifier.

   Attributes:
   stateId - a unique identifier (within the context of a specified
         workflow) for the state currently occupied by this document.

   isPublishable - indicates whether a document in this state be published
-->
<!ELEMENT StateName (#PCDATA)>
<!ATTLIST StateName
   stateId %UniqueId; #IMPLIED
   isPublishable %Boolean; "no"
>
<!--
   ContentStatus = Workflow information about this document. Naming follows the column names.

   Attributes:
   contentId - The unique numeric identifier for this document.

   thisRevision - The numeric identifier of the revision of this document.

   currentRevision - The numeric identifier of the revision that is marked as
         the current revision in the ContentStatus table. If there is no
         current revision, the attribute is not included.

   editRevision - The numeric identifier of the revision that is being edited
         (which is not necessarily this revision). If no revision is being
         edited, the attribute is not added.
-->
<!ELEMENT ContentStatus (WorkflowName, StateName, ContentTypeName, Title, CheckOutUserName, LastModifier, LastModified, CreatedBy, CreatedDate, StartDate?, ExpirationDate?, AgingTime?, PublishDate?, PathName?, Suffix?)>
<!ATTLIST ContentStatus
   contentId %UniqueId; #REQUIRED
   thisRevision %UniqueId; #REQUIRED
   currentRevision %UniqueId; #IMPLIED
   editRevision %UniqueId; #IMPLIED
>
<!--
   ContentTypeName = The content type name of the document that will be generated by this
   editor.

   Attributes:
   typeId - a unique identifier for the type of this content
-->
<!ELEMENT ContentTypeName (#PCDATA)>
<!ATTLIST ContentTypeName
   typeId %UniqueId; #REQUIRED
>
<!--
   The name of the workflow in which this item currently resides.

   Attributes:
   workflowId - a unique identifier for the workflow that this document
         is currently in.
-->
<!ELEMENT WorkflowName (#PCDATA)>
<!ATTLIST WorkflowName
   workflowId %UniqueId; #REQUIRED
>
<!--
   All of the UI descriptors and data needed by the control to display the
   field.

   Content:
   DisplayLabel - The text that should be used to label the control.

   Control - The UI widget used to display the data. The name of the control
         is used to find the correct template in the control library.


   Attributes:
   displayType - How should the field be displayed. If sys_normal, use the
         control named in the name attribute. If sys_hidden, use the
         hidden field type, else if sys_error, use the associated field, but
         possibly modify the format of the display text. If sys_error is
         specified, the value of the associated label may already have been
         modified.

-->
<!ELEMENT DisplayField (DisplayLabel?, Control)>
<!ATTLIST DisplayField
   displayType (sys_normal | sys_hidden | sys_error) "sys_normal"
   fieldValueType (unknown | content | meta) "unknown"
>
<!--
   All of the UI descriptors and data needed by the control to display the
   field.

   Content:
   Value, Table - Data set to be displayed by the control. Which
         element is present can be determined by the dataType attribute.
         If the data is empty, the element is not present. A Table is used
         for child data because it is a collection of rows.

   DisplayChoices - If the control is a choice list control, this element
         contains all the possibilities including the selected status.

   ParamList - a collection of custom parameters to be interpretted by the
         control. The control documentation should be used to determine
         params that will have an effect on the control. Typically, custom
         params are optional, although the control can deem them required.

   Attributes:
   name - the name of the control, used to find it in the control library.

   paramName - HTML field name, is unique among all fields in this item. When
         the data is submitted, the control is responsible to make sure the
         value(s) entered by the user is assigned to a param(s) by this name.

   dataType - An enumeration to indicate where this field originated, either
         system, shared or editor specific.

   dimension - An enumeration describing what form the data takes. There are
         3 forms. Either it's a single value, multiple values or a child.
         The value of this attribute is used to determine the data element.
         'single' uses the 'Value' element. 'array' has no data
         element and 'table' (2 dimensional array) uses the Table element.
         If table is set, the associated ActionLink param name will be set to
         sys_childid and the value will be set to this child's id. The
         command handler will save the content like a normal submit, the
         redirect to the child summary page.

   isReadOnly - A flag to indicate whether this field is read-only.

   isRequired - A flag to indicate whether this field must have a validated
         value before the document transitions to another state. It does not
         mean the field must be filled out before the document can be
         successfully saved.

   hasBinaryData - A flag that is present if the field is a binary field and
         the field has data. Data for binary fields is never included in the
         output doc. The attribute is not present unless its value is true.

   clearBinaryParam - The name of the parameter that will be posted with a yes
         or no value to determine whether this control's binary field will be cleared.
   accessKey - The accessKey for the control.
-->
<!ELEMENT Control (Value?, (DisplayChoices | Table)?, ParamList?)>
<!ATTLIST Control
   name CDATA #REQUIRED
   paramName CDATA #REQUIRED
   dataType (sys_local | sys_shared | sys_system) "sys_local"
   dimension (single | array | table) "single"
   isReadOnly %Boolean; "no"
   isRequired %Boolean; "no"
   hasBinaryData %Boolean; #IMPLIED
   clearBinaryParam CDATA #IMPLIED
   accessKey CDATA #IMPLIED
>

<!--
   The ActionLinkList contains a collection of actions that can be applied
   to the data in this cell. The action should apply the the owning form so
   any changes to the editable fields will be saved before the action is
   taken.
-->
<!ELEMENT Table (Header?, RowData?, HiddenFormParams?, ActionLinkList?)>
<!--
   Header = contains each columns' header text
-->
<!ELEMENT Header (HeaderColumn+)>
<!ELEMENT HeaderColumn (#PCDATA)>
<!ELEMENT RowData (Row*)>
<!--
   The ActionLinkList contains a collection of actions that can be applied
   to the data in each row.

   Attributes:
   childkey - the primary key for this row.
-->
<!ELEMENT Row (Column+, ActionLinkList?)>
<!ATTLIST Row
   childkey CDATA #IMPLIED
>
<!--
   A single field within a row of data.

   Attributes:
   name - the name of the field, as specified in the PSXFieldSet
-->
<!ELEMENT Column (Control)>
<!ATTLIST Param
   name CDATA #REQUIRED
>
<!--
   A name-value pairing. The attribute is the name while the content is the
   value.

   Attributes:
   type - optional attribute whose allowed values are defined by the context
         in which it is used

   name - the name of the parameter, the allowed chars are defined by the
         context of its use

   sourceType - indicates where the definition of this parameter was
      located. If a parameter is originally defined in the system def,
      then overridden in the local def, this value will be sys_local.
      This attribute will be present on all parameters passed to
      controls. Allowed values are sys_local, sys_shared and sys_system.
-->
<!ELEMENT Param (#PCDATA)>
<!ATTLIST Param
   type CDATA #IMPLIED
   name CDATA #REQUIRED
   sourceType CDATA #IMPLIED
>
<!ELEMENT ParamList (Param*)>

<!ELEMENT SectionLinkList (SectionLink+)>
<!--
   Fully qualified URL request, with all params and values.

   Attributes:
   name - A unique name with all SectionLinks in this doc.
-->
<!ELEMENT SectionLink (#PCDATA)>
<!ATTLIST SectionLink
   name CDATA #REQUIRED
>
<!--
   An action that can be taken by the end user. They are meant to be used
   with a model such as the submit BUTTON on HTML forms. The button must have
   an action that appends all name/value pairs specified in the Param objects
   included with this element. This is done to support multiple actions in a
   form that require different values for more than 1 parameter and it allows
   us to decouple the widget text from the submitted value.
   If the button is disabled, the style sheet has the option of 'graying out'
   or hiding the button. The style sheet can use any UI control it wishes, as
   long as the semantics of the HTML BUTTON are followed when the request is
   submitted. The attribute is named in the negative to match the HTML
   semantics of the button element.
   The value of the Param must be literal text, it cannot be a replacement
   value.

   Attributes:
   isDisabled - included if this action should be grayed out when rendered.
         The stylesheet has the option of hiding the widget if the browser
         doesn't support disabling.

   isTransition - A flag to indicate whether this action initiates a
         transition. All other actions do not include this flag.

   name - An optional internal name for this node. For future use.

   imageHref - A url pointing to an image to use for this action. If present,
         the stylesheet should use the image rather than a button.
-->
<!ELEMENT ActionLink (DisplayLabel, Param*)>
<!ATTLIST ActionLink
   isDisabled %Boolean; "no"
   isTransition %Boolean; "no"
   name CDATA #IMPLIED
   imageHref CDATA #IMPLIED
>
<!--
   A collection of actions that should be available to the user in the form
   used to edit the data in this document..
-->
<!ELEMENT ActionLinkList (ActionLink+)>

<!ELEMENT VariantList (Variant*)>
<!ELEMENT Variant (DisplayName, AssemblyUrl, StylesheetName)>
<!ATTLIST Variant
   variantId %UniqueId; #REQUIRED
>
<!ELEMENT DisplayName (#PCDATA)>
<!ELEMENT AssemblyUrl (#PCDATA)>
<!ELEMENT StylesheetName (#PCDATA)>
<!--
   If validation errors occur, this element may contain a generic error
   message suitable for display to the user. Whether empty or not, it will be
   added to the returned document as the first child of the root. The text
   of the message is in the appropriate language, if it is available.

   Attributes:
   errorCount - How many errors are flagged in this document. Value is 1 or
         more.
 -->
<!ELEMENT DisplayError (GenericMessage, Details*)>
<!ATTLIST DisplayError
   errorCount CDATA #REQUIRED
>
<!--
   The generic error message, usually the first message displayed.
-->
<!ELEMENT GenericMessage (#PCDATA)>
<!--
  For each error occurred, a detailed message can be added.
-->
<!ELEMENT Details (FieldError+)>
<!--
  This element provides an error message per field, including the fields
  submit name.

  Attributes:
  submitName - the field submit name is unique within the entire item.

  displayName - the field display name, the one shown to the user on the
    item page.
-->
<!ELEMENT FieldError (#PCDATA)>
<!ATTLIST FieldError
   submitName CDATA #REQUIRED
   displayName CDATA #REQUIRED
>
