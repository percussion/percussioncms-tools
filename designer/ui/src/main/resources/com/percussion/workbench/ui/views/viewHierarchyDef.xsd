<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by Paul Howard (Percussion Software) -->
<!-- edited with XMLSpy v2006 sp1 U (http://www.altova.com) by Paul Howard (Percussion Software) -->
<!--W3C Schema generated by XMLSPY v5 rel. 4 U (http://www.xmlspy.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
   <xs:element name="Catalog">
      <xs:annotation>
         <xs:documentation>A Catalog defines a way to determine a set of containers and leaves at run time. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="CatalogProperty" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="Handler" minOccurs="0"/>
            <xs:element ref="Node" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="Catalog" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:attribute name="type" use="optional" default="object">
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKEN">
                  <xs:enumeration value="class">
                     <xs:annotation>
                        <xs:documentation>If this type is chosen, the name attibute must specify a class name that extends the PSCatalogFactoryBase class. This class is then responsible for performing the catalog.</xs:documentation>
                     </xs:annotation>
                  </xs:enumeration>
                  <xs:enumeration value="object">
                     <xs:annotation>
                        <xs:documentation>This type causes the system to automatically catalog all instances of the type whose string id is provided in the name attribute. This must be the string representation of an Enum value (e.g.PSObjectTypes) that represents the primary type. This value is passed to the PSCoreFactory to obtain the model for cataloging.</xs:documentation>
                     </xs:annotation>
                  </xs:enumeration>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="name" type="xs:string" use="optional">
            <xs:annotation>
               <xs:documentation>The meaning of this attribute varies depending on the value of the type attribute.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="model" type="xs:string"/>
         <xs:attribute name="allowedTypes" use="optional">
            <xs:annotation>
               <xs:documentation>Allows the designer to limit the object types that can be placed in this folder. A list of object type ids as defined in the workbench core code. Any unrecognized ids are ignored. Ids are case-sensitive. If not provided, all types are allowed. The handler of this class will inherit these types if it doesn't provide its own.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKENS"/>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="defaultInstanceTree" type="xs:boolean" default="true">
            <xs:annotation>
               <xs:documentation>Allows the designer to override the default behavior of substituting the nodes of the InstanceTree that has a matching object type. If the node has no other children, the children from a matching InstanceTree will be used unless this value is false.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="isReference" type="xs:boolean" use="optional" default="false"/>
         <xs:attribute name="displayLabelSource" use="optional" default="objectName">
            <xs:annotation>
               <xs:documentation>See the same named attribute of the Node element. Behavior is identical except the labelKey value is not allowed.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKEN">
                  <xs:enumeration value="objectName"/>
                  <xs:enumeration value="objectLabel"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="catalogObjectTypes" type="xs:NMTOKENS" use="optional">
            <xs:annotation>
               <xs:documentation>If 2 or more sibling Catalog nodes are present, then this attribute must be specified. It should include a space-delimited list of the object types that this catalog generates, just like the allowedTypes attribute. These values must be the string representation of the PSObjectType.toSerial() method.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="CatalogProperty">
      <xs:annotation>
         <xs:documentation>This property is inherited by all Catalog nodes that are descendents of the parent node.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:simpleContent>
            <xs:extension base="xs:string">
               <xs:attribute name="name" type="xs:string" use="required"/>
            </xs:extension>
         </xs:simpleContent>
      </xs:complexType>
   </xs:element>
   <xs:element name="Description" type="xs:string"/>
   <xs:element name="InstanceTree">
      <xs:annotation>
         <xs:documentation>Definitions for specific design object types that can be shared.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="Handler" minOccurs="0"/>
            <xs:choice minOccurs="0">
               <xs:sequence>
                  <xs:element ref="Node" maxOccurs="unbounded"/>
               </xs:sequence>
               <xs:sequence>
                  <xs:element ref="Catalog" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:choice>
         </xs:sequence>
         <xs:attribute name="objectIds" type="xs:NMTOKENS" use="required">
            <xs:annotation>
               <xs:documentation>This is the string representation of 1 or more object type(s) for which this fragment will be used. See PSObjectTypes for examples. If a node in the tree def has this object type and it doesn't have any declared children, then the children of this node will be used as its children. Otherwise, if the node does have children, then the instance definition will be ignored. The instance tree can also be overridden by setting the defaultInstanceTree attribute of the Catalog element to false. This allows the node to have no children w/o using a catalog factory that returns an empty set.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sorting" type="xs:NMTOKEN" default="document">
            <xs:annotation>
               <xs:documentation>If there is a mixture of Nodes and Catalogs, then 'document' type is not supported. In that case, ascending will be used unless descending is specified. Containers are sorted before leaves for ascending and after for descending.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="displayLabelSource" use="optional" default="objectName">
            <xs:annotation>
               <xs:documentation>See the same-named attribute on the Catalog node for description.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKEN">
                  <xs:enumeration value="objectName"/>
                  <xs:enumeration value="objectLabel"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="Node">
      <xs:annotation>
         <xs:documentation>A Node specifies a single folder or leaf.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element name="NodeProperty" minOccurs="0" maxOccurs="unbounded">
               <xs:annotation>
                  <xs:documentation>Name/value pairs that are passed through to users of the PSUiRefernce node. They are not used by the declarative framework in any way. Generally, they are used to provide information about a node rather than relying on the name of the node. The content is the value. Unlike CatalogProperties, these are not inherited.</xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:simpleContent>
                     <xs:extension base="xs:string">
                        <xs:attribute name="name" type="xs:string" use="required"/>
                     </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>
            <xs:element name="HomeNodeProperty" minOccurs="0" maxOccurs="unbounded">
               <xs:annotation>
                  <xs:documentation>If the homeTypeClassName attribute in the Node parent is specified, all of these are passed to the sorting method. The content is the value of the property.</xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:simpleContent>
                     <xs:extension base="xs:string">
                        <xs:attribute name="name" type="xs:string" use="required"/>
                     </xs:extension>
                  </xs:simpleContent>
               </xs:complexType>
            </xs:element>
            <xs:element ref="CatalogProperty" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="Description" minOccurs="0"/>
            <xs:element ref="Handler" minOccurs="0">
               <xs:annotation>
                  <xs:documentation>If a node needs special handling, a custom class can be provided that implements a pre-defined interface.</xs:documentation>
               </xs:annotation>
            </xs:element>
            <xs:element ref="Node" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element ref="Catalog" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:attribute name="labelKey" type="xs:string" use="required">
            <xs:annotation>
               <xs:documentation>This is a key into the I18N bundle. If no entry is found in the bundle, the key will be used as the label for the node.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preferences" type="xs:string"/>
         <xs:attribute name="objectId" type="xs:string"/>
         <xs:attribute name="allowedTypes" type="xs:NMTOKENS" use="optional">
            <xs:annotation>
               <xs:documentation>Identical to the same named node on the Catalog element. See that attribute's description for details.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sorting" type="xs:NMTOKEN" default="document">
            <xs:annotation>
               <xs:documentation>Specifies how the children of this node should be ordered. If there is a mixture of Nodes and Catalogs, then 'document' type is not supported. In that case, ascending will be used unless descending is specified. Containers are sorted before leaves for ascending and after for descending.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="objectHomeType" type="xs:string">
            <xs:annotation>
               <xs:documentation>If this node is the 'home node' for some type of object, such as slots, then this attribute will have the object type. It should be the string representation of the PSObjectType (e.g. SLOT.) If a new object is created and the user doesn't specify a specific location, then it will be placed here. There should only be 1 home node per object type within the design views.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="homeTypeClassName" type="xs:string" use="optional">
            <xs:annotation>
               <xs:documentation>The name of a class that implements the IPSHomeNodeManager interface. If multiple nodes have an objectHomeType defined, this attribute must be present. The class is used to determine which node gets an instance of that home object type.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="treeName" type="xs:string" use="optional">
            <xs:annotation>
               <xs:documentation>If this node supports the creation of new USER_FILE folders, then this value must be supplied. It specifies the name of the element at the root of the associated tree. Each node that has such a sub-structure should use a different tree.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="displayLabelSource" use="optional" default="labelKey">
            <xs:annotation>
               <xs:documentation>Controls what text is used as the label within the UI tree. </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKEN">
                  <xs:enumeration value="labelKey">
                     <xs:annotation>
                        <xs:documentation>Use the value specified in the labelKey attribute, even if an objectId is supplied. If an object is supplied and no labelKey is supplied, then the object name is used.</xs:documentation>
                     </xs:annotation>
                  </xs:enumeration>
                  <xs:enumeration value="objectName">
                     <xs:annotation>
                        <xs:documentation>Use the associated object's name.</xs:documentation>
                     </xs:annotation>
                  </xs:enumeration>
                  <xs:enumeration value="objectLabel">
                     <xs:annotation>
                        <xs:documentation>Use the associated object's label.</xs:documentation>
                     </xs:annotation>
                  </xs:enumeration>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="TreeDef">
      <xs:annotation>
         <xs:documentation>The root node.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="InstanceTree" minOccurs="0" maxOccurs="unbounded"/>
            <xs:choice>
               <xs:sequence>
                  <xs:element ref="Node" maxOccurs="unbounded"/>
               </xs:sequence>
               <xs:sequence>
                  <xs:element ref="Catalog"/>
               </xs:sequence>
            </xs:choice>
         </xs:sequence>
         <xs:attribute name="sorting" default="document">
            <xs:annotation>
               <xs:documentation>If there is a mixture of Nodes and Catalogs, then 'document' type is not supported. In that case, ascending will be used unless descending is specified. Containers are sorted before leaves for ascending and after for descending.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:NMTOKEN">
                  <xs:enumeration value="document"/>
                  <xs:enumeration value="ascending"/>
                  <xs:enumeration value="descending"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:element name="Handler">
      <xs:annotation>
         <xs:documentation>If a node needs special handling, a custom class can be provided that implements a pre-defined interface.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="className" type="xs:string" use="optional">
            <xs:annotation>
               <xs:documentation>Java class name of a class that implements the IPSDeclarativeNodeHandler interface. The children of this node will be supplied to the ctor when the class is instantiated, along w/ any catalog properties that ancestors have. If not provided, the PSIconNodeHandler is used.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowedTypes" type="xs:NMTOKENS" use="optional">
            <xs:annotation>
               <xs:documentation>Identical to the same named node on the Catalog element. See that attribute's description for details.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="iconPath" type="xs:string"/>
         <xs:attribute name="securable" type="xs:boolean" use="optional" default="true"/>
         <xs:attribute name="copyable" type="xs:boolean" use="optional" default="true"/>
         <xs:attribute name="deletable" type="xs:boolean" use="optional" default="true"/>
         <xs:attribute name="renamable" type="xs:boolean" use="optional" default="true"/>
         <xs:attribute name="pasteable" type="xs:boolean" use="optional" default="true"/>
      </xs:complexType>
   </xs:element>
</xs:schema>
