/*[ ApplicationRequestor.java ]************************************************
 *
 * COPYRIGHT (c) 1999 - 2003 by Percussion Software, Inc., Stoneham, MA USA.
 * All rights reserved. This material contains unpublished, copyrighted
 * work including confidential and proprietary information of Percussion.
 *
 ******************************************************************************/
package com.percussion.E2Designer;

import com.percussion.conn.PSDesignerConnection;
import com.percussion.util.PSUrlUtils;
import com.percussion.xml.PSXmlDocumentBuilder;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Map;

/**
 * Interfaces between E2Designer catalog requests and E2Server applications,
 * serving as catalog stores. This is an alternative method to access server-
 * hosted data/objects than <code>PSCataloger</code> or <code>PSObjectStore
 * </code>.
 * <p>
 * Typically, this class makes HTTP requests of Rhythmyx applications
 * (using the designer's connection) and returns the result XML document.
 */
public class ApplicationRequestor
{
   /**
    * Initializes a newly created <code>ApplicationRequestor</code> object to
    * the server specified in the connection parameter.
    *
    * @param conn the connection to the E2 server
    * @param requestRoot the URL root that the server is listening on. For
    *                    example "Rhythmyx".  Should not include leading or
    *                    trailing slashes
    *
    * @throws IllegalArgumentException if any parameter is <code>null</code>
    */

   public ApplicationRequestor(PSDesignerConnection conn, String requestRoot)
   {
      if (null == conn)
         throw new IllegalArgumentException("conn cannot be null");
      if (null == requestRoot)
         throw new IllegalArgumentException("requestRoot cannot be null");

      m_conn = conn;
      m_requestRoot = requestRoot;
   }
   /**
    * Make request to a specified Url using the specified parameters.
    * @param inputUrl the url to make the request to, can not be
    * <code>null</code>.
    * @param params Map of the parameters, can be <code>null<code>
    * @return XML document generated by parsing the result or <code>null</code>
    *    if the result document could not be parsed.
    * @throws IOException if there is problem connecting to the url given.
    * @throws IllegalArgumentException if url is <code>null</code>
    */
   public Document makeRequest(String inputUrl, Map params)
      throws IOException
   {
       if (null == inputUrl)
         throw new IllegalArgumentException("Url cannot be null");
      Document result = null;
      try
      {
         String urlString;
         //Check if url is a valid url
         URL destUrl = new URL(inputUrl);
         if (params != null && params.size() > 0)
         {
            // TODO: consider POSTing params instead of adding them to URL
            urlString = PSUrlUtils.createUrl(destUrl.toString(),
                  params.entrySet().iterator(), null);
         }
         else
         {
            urlString = destUrl.toString();
         }
         InputStream in = null;
         try
         {
            URL url = new URL( urlString );
            System.out.println("url = " + url);
            URLConnection urlConn = url.openConnection();
            urlConn.setRequestProperty("Cookie", "pssessid=" +
               m_conn.getSessionId());
            urlConn.setRequestProperty("Cookie", m_conn.JSESSION_COOKIE + "=" +
               m_conn.getJSessionId());

            if ( null != m_conn.getAuthorizationValue())
            {
               urlConn.setRequestProperty(
                     PSDesignerConnection.HTTP_AUTHORIZATION_HEADER,
                     m_conn.getAuthorizationValue());
            }

            in = urlConn.getInputStream();
            result = PSXmlDocumentBuilder.createXmlDocument(new InputSource(in),
               false);
         }
         catch (MalformedURLException e)
         {
            // shouldn't happen
            throw new RuntimeException("Invalid Url");
         }
         catch (SAXException e)
         {
            // probably didn't return XML
            e.printStackTrace();
            result = PSXmlDocumentBuilder.createXmlDocument();
         }
         finally
         {
            if (in != null) in.close();
         }
         return result;
      }
      catch(MalformedURLException e)
      {
         throw new IllegalArgumentException("Input Url is not Valid");
      }
   }


   /**
    * Convienience version of {@link #makeRequest(String,String,Map)} called
    * as <code>makeRequest( appName, resourceName, null )
    */
   public Document makeRequest(String appName, String resourceName)
         throws IOException
   {
      return makeRequest(appName, resourceName, null);
   }


   /**
    * Makes a request to the specified Rhythmyx application and resource
    * using the specified parameters and returns the resulting XML document.
    *
    * @param appName name of the Rhythmyx application; not <code>null</code>
    * @param resourceName name of the resource within the application;
    *    not <code>null</code>
    * @param params collection of parameter name/value pairs, or
    * <code>null</code>
    * @returns XML document generated by parsing the result or <code>null</code>
    *    if the result document could not be parsed.
    * @throws IllegalArgumentException is appName or resourceName is
    * <code>null</code>
    * @throws IOException if there is a problem communicating with the server
    */
   public Document makeRequest(String appName, String resourceName, Map params)
      throws IOException
   {
      Document result = null;

      if (null == appName || null == resourceName)
         throw new IllegalArgumentException(
               "neither appName nor resourceName can be null");

      // build base request
      StringBuffer urlBase = new StringBuffer("/");
      urlBase.append(m_requestRoot).append("/");
      urlBase.append(appName).append("/");
      urlBase.append(resourceName);

      String urlString;
      try
      {
         URL url = new URL(m_conn.getProtocol(), m_conn.getServer(),
            m_conn.getPort(), urlBase.toString());

         if (params != null && params.size() > 0)
         {
            // TODO: consider POSTing params instead of adding them to URL
            urlString = PSUrlUtils.createUrl(url.toString(),
                  params.entrySet().iterator(), null);
         }
         else
         {
            urlString = url.toString();
         }
      }
      catch (MalformedURLException e)
      {
         // shouldn't happen as we've hardcoded a known protocol
         throw new RuntimeException("URL doesn't understand " +
            m_conn.getProtocol());
      }

      InputStream in = null;
      try
      {
         URL url = new URL( urlString );
         System.out.println("url = " + url);
         URLConnection urlConn = url.openConnection();
         urlConn.setRequestProperty("Cookie", "pssessid=" +
               m_conn.getSessionId());
         urlConn.setRequestProperty("Cookie", m_conn.JSESSION_COOKIE + "=" +
            m_conn.getJSessionId());         
         if ( null != m_conn.getAuthorizationValue())
         {
            urlConn.setRequestProperty(
                  PSDesignerConnection.HTTP_AUTHORIZATION_HEADER,
                  m_conn.getAuthorizationValue());
         }


         in = urlConn.getInputStream();
         result = PSXmlDocumentBuilder.createXmlDocument(new InputSource(in),
               false);
      }
      catch (MalformedURLException e)
      {
         // shouldn't happen as we've hardcoded a known protocol
         throw new RuntimeException("URL doesn't understand " +
            m_conn.getProtocol());
      }
      catch (SAXException e)
      {
         // probably didn't return XML
         e.printStackTrace();
         result = PSXmlDocumentBuilder.createXmlDocument();
      }
      finally
      {
         if (in != null) in.close();
      }

      return result;
   }


   /**
    * A connection to an E2 server, used for making HTTP requests.
    * Not <code>null</code> after construction.
    */
   private final PSDesignerConnection m_conn;

   /**
    * The server request root (path).  Set in the constructor.
    */
   private final String m_requestRoot;
}
