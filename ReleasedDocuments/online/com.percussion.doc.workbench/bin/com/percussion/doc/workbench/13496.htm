<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title> Selecting Values </title>
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<meta name="Generator" content="AITPublish">
<meta name="Keywords" content="">
<link rel="stylesheet" type="text/css" href="44.css">
</head>
<body text="#000000" link="#0000A0" alink="#008000" vlink="#FF0000"><table cellpadding="0" cellspacing="0" border="0">
<tr valign="top">
<td width= "18">
<p class="bodytext"><a href="13760.htm" target="_self"><img src="125.gif" alt="Previous Topic" height="17" width="18" vspace="0" hspace="0" align="bottom" border="0"></a></p></td>
</tr>
</table>
<h1 class="heading1">Selecting Values</h1>
<p class="bodytext"></p>
<p class="bodytext">The Value Selector is available from different fields to help you enter the data for the field.  When you click in a field that accesses the Value Selector, Rhythmyx displays a browse button (. . .).  You can enter the value into the field manually or click the browse button to activate the Value Selector.</p>
<p class="widegraphic"><img src="wkb_valueselector.gif" alt="Wkb_ValueSelector" height="285" width="385" vspace="2" hspace="2" align="bottom" border="0"></p>
<p class="subheading"><strong class="specialbold">Field Descriptions</strong></p>
<p class="fielddescription"><strong class="fieldname">Type</strong><strong class="specialbold">  </strong>Drop list.  Specifies the classification of the Value.  Options include:</p>
<table width="600" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td width="216"><p class="tableheading">Type</p>
</td>
<td width="384"><p class="tableheading">Description</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Backend Column</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from a backend database column.  Available options are all columns in all database tables associated with the Resource.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">CGI Variable</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from the value of the specified CGI variable.  Available options include all CGI variables.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Content Item Data</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from the specified Content Item Field.  This option may return a Collection of Values.  See Collections Processing, below, for details about the processing of Collections.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Content Item Status</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from one of the following tables:</p>
<ul class="tablelistbullet"><li class="tablelistbullet">CONTENTSTATUS</li><li class="tablelistbullet">STATES</li><li class="tablelistbullet">WORKFLOWAPPS<p class="tablebodytext">Most commonly, you will want either the name (STATES.STATENAME) or ID (CONTENTSTATUS.CONTENTSTATEID) of the current State of the Content Item when using this class of values.</p>
</li></ul></td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Cookie</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from the specified Cookie.  You must enter the name of the Cookie manually.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Date</p>
</td>
<td width="384"><p class="tablebodytext">Value is a date.  Use SQL syntax when specifying the date value.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">HTML Parameter</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from the specified HTML parameter.  This Value type should only be selected if the HTML parameter could potentially store multiple values (for example, if the values are derived from a sys_CheckBoxGroup control).  If the parameter only stores a single value, you should use the SIngle HTML Parameter type.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Literal</p>
</td>
<td width="384"><p class="tablebodytext">Value is the literal value you enter manually in the <strong class="specialbold">Value</strong> field.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Macro</p>
</td>
<td width="384"><p class="tablebodytext">Value is returned by the macro selected in the drop list. </p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Number</p>
</td>
<td width="384"><p class="tablebodytext">Value is the numeric value you enter manually in the <strong class="specialbold">Value</strong> field.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Relationship (Triggering)</p>
</td>
<td width="384"><p class="tablebodytext">Used only with Effects.  Value is derived from the specified property of the Relationship that triggered the Effect.  Available options are all properties (including User Properties) of the Relationship Type of the Relationship that triggered the Effect.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Relationship (Current)</p>
</td>
<td width="384"><p class="tablebodytext">Used only with Effects.  Value is  derived from the specified property of the Relationship current being processed.  Available options are all properties (including User Properties) of the Relationship Type that is being processed.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">Single HTML Parameter</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from the specified HTML parameter.  Unless the parameter could potentially store multiple values (for example, if the values are derived from a sys_CheckBoxGroup control), you should use this Value type when specifying HTML parameters.  If a parameter could store multiple values, use the HTML Parameter value type.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="216"><p class="tablebodytext">User Context</p>
</td>
<td width="384"><p class="tablebodytext">Value is derived from a user context variable, which stores information about the user logged in and the current session.</p>
</td>
</tr>

</table>
<p class="fielddescription"><strong class="fieldname">Value</strong>  The selected value.</p>
<h6 class="heading6"><strong class="specialbold">Choices</strong>  The options available for the Value Type.</h6>
<p class="bodytext">To use the Value Selector:</p>
<ol class="listnumber"><li class="listnumber">Click the browse button in the field for which you want to enter a value.</li><li class="listnumber">Rhythmyx displays the Value Selector dialog.</li><li class="listnumber">Select the Value <strong class="specialbold">Type</strong>.</li><li class="listnumber">Specify the Value.<ul class="listbullet2"><li class="listbullet2">For most Value Types, a list of available Values will be listed in the <strong class="specialbold">Choices</strong> field.  Select the value you want to specify.</li><li class="listbullet2">For a Literal or Number Value Type, enter the value.  Numeric values should not include commas or periods.</li><li class="listbullet2">For the Date Value Type, enter the SQL date expression.</li></ul></li><li class="listnumber">Click [<strong class="specialbold">OK</strong>] to add your choice to the field.</li></ol><p class="subheading">Collections Processing</p>
<p class="bodytext">Content Value Data and Relationship Value Types may return collections of values rather than single values.  The result of the processing depends on which side of the operand the collection is on.</p>
<p class="subheading">Collection to Left of Operand</p>
<table width="600" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td width="192"><p class="tableheading">Operation</p>
</td>
<td width="408"><p class="tableheading">Behavior</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">=, !=</p>
</td>
<td width="408"><p class="tablebodytext">If the collection consists of a single item, it is processed; otherwise, returns <em class="emphasis">false</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">LIKE</p>
</td>
<td width="408"><p class="tablebodytext">Behaves as a set of conditional statements linked by ORs:  (left1 LIKE right) OR (left2 LIKE right) OR (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">NOT LIKE</p>
</td>
<td width="408"><p class="tablebodytext">Behaves as a set of conditional statements liked by ANDs:  (left1 LIKE right) AND (left2 LIKE right) AND (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">&lt;, &lt;=, &gt;, &gt;=</p>
</td>
<td width="408"><p class="tablebodytext">Behaves as a set of conditional statements liked by ANDs:  (left1 LIKE right) AND (left2 LIKE right) AND (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NULL</p>
</td>
<td width="408"><p class="tablebodytext">If the collection is empty, returns <em class="emphasis">true</em>; otherwise, returns <em class="emphasis">false</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NOT NULL</p>
</td>
<td width="408"><p class="tablebodytext">If the collection is empty, returns <em class="emphasis">false</em>; otherwise, returns <em class="emphasis">true</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">BETWEEN, NOT BETWEEN</p>
</td>
<td width="408"><p class="tablebodytext">Illegal if the right side of the equation consists of a single value.  Displays an error message.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IN, NOT IN</p>
</td>
<td width="408"><p class="tablebodytext">If the collection contains exactly 1 entry, it is processed; otherwise, results in an error.</p>
</td>
</tr>

</table>
<p class="subheading">Collection to Right of Operand</p>
<table width="672" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td width="192"><p class="tableheading">Operation</p>
</td>
<td width="480"><p class="tableheading">Behavior</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">=, !=</p>
</td>
<td width="480"><p class="tablebodytext">If the collection consists of a single item, it is processed; otherwise, returns <em class="emphasis">false</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">LIKE</p>
</td>
<td width="480"><p class="tablebodytext">Behaves as a set of conditional statements linked by ORs:  (left1 LIKE right) OR (left2 LIKE right) OR (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">NOT LIKE</p>
</td>
<td width="480"><p class="tablebodytext">Behaves as a set of conditional statements liked by ANDs:  (left1 LIKE right) AND (left2 LIKE right) AND (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">&lt;, &lt;=, &gt;, &gt;=</p>
</td>
<td width="480"><p class="tablebodytext">Behaves as a set of conditional statements liked by ANDs:  (left1 LIKE right) AND (left2 LIKE right) AND (left3 LIKE right)...</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NULL</p>
</td>
<td width="480"><p class="tablebodytext">Not allowed.  Results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NOT NULL</p>
</td>
<td width="480"><p class="tablebodytext">Not allowed.  Results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">BETWEEN, NOT BETWEEN</p>
</td>
<td width="480"><p class="tablebodytext">If the collection contains exactly 2 entries, it is processed; otherwise, results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IN, NOT IN</p>
</td>
<td width="480"><p class="tablebodytext">The collection is processed.</p>
</td>
</tr>

</table>
<p class="subheading">Collection on Both Sides of Operand</p>
<table width="672" cellpadding="2" cellspacing="0" border="0" style="border-collapse:collapse">
<tr align="left" valign="top">
<td width="192"><p class="tableheading">Operation</p>
</td>
<td width="480"><p class="tableheading">Behavior</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">=, !=</p>
</td>
<td width="480"><p class="tablebodytext">If both collections consists of exactly 1 item, they are processed; otherwise returns <em class="emphasis">false</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">LIKE</p>
</td>
<td width="480"><p class="tablebodytext">If each collection consists of 1 or more items, each item in the left collection is compared to each item in the right collection; if, for any pair of items, a match is found, returns <em class="emphasis">true</em>; otherwise returns <em class="emphasis">false</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">NOT LIKE</p>
</td>
<td width="480"><p class="tablebodytext">If each collection consists of 1 or more items, each item in the left collection is compared to each item in the right collection; if, for any pair of items, a match is found, returns <em class="emphasis">false</em>; otherwise returns <em class="emphasis">true</em>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">&lt;, &lt;=, &gt;, &gt;=</p>
</td>
<td width="480"><p class="tablebodytext">Illegal operand; results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NULL</p>
</td>
<td width="480"><p class="tablebodytext">Illegal operand; results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IS NOT NULL</p>
</td>
<td width="480"><p class="tablebodytext">Illegal operand; results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">BETWEEN, NOT BETWEEN</p>
</td>
<td width="480"><p class="tablebodytext">If the Left collection contains exactly 1 entry and the right collection contains exactly 2 entries, the equation is processed; otherwise, results in an error.</p>
</td>
</tr>
<tr align="left" valign="top">
<td width="192"><p class="tablebodytext">IN, NOT IN</p>
</td>
<td width="480"><p class="tablebodytext">Processed similar to LIKE and NOT LIKE.</p>
</td>
</tr>

</table>
<p class="bodytext"></p>

</body>
</html>

